<project name="Build for Riena">
	<property file="build.${ECLIPSE_STREAM}.properties"/>
	<property name="pluginDir" value="${basedir}/tools/eclipse.${ECLIPSE_STREAM}.sdk/eclipse/plugins"/>
	<property name="fetchCacheLocation" value="c:/scmCache"/>
	<property name="gitCache" value="${fetchCacheLocation}/ssh___rienaBuild_build_eclipse_org_gitroot_riena_org_eclipse_riena_git"/>
	<property name="gitTargetPlatform" value="${fetchCacheLocation}/ssh___rienaBuild_build_eclipse_org_gitroot_riena_org_eclipse_3xtargets_git"/>

	<!-- compute equinox launcher jar name for use with the java calls -->
	<fileset id="equinox.launcher.fileset" dir="${pluginDir}" includes="**/org.eclipse.equinox.launcher_*.jar" />
	<pathconvert property="equinox.launcher.jar" refid="equinox.launcher.fileset" />

	<fileset id="pde.build.script.fileset" dir="${pluginDir}" includes="org.eclipse.pde.build_*/scripts/build.xml" />
	<pathconvert property="pde.build.script" refid="pde.build.script.fileset" />

	<target name="clean">
		<delete dir="config"/>
		<delete dir="config.git"/>
		<delete dir="config.git.e4"/>
		<delete dir="config.rap"/>
		<delete dir="tmp/org.eclipse.riena"/>
		<copy todir="config">
			<fileset dir="${gitCache}/org.eclipse.riena.build3/config"/>
		</copy>
		<copy todir="config.git">
			<fileset dir="${gitCache}/org.eclipse.riena.build3/config.git"/>
		</copy>
		<copy todir="config.git.e4">
			<fileset dir="${gitCache}/org.eclipse.riena.build3/config.git.e4"/>
		</copy>
		<copy todir="config.rap">
			<fileset dir="${gitCache}/org.eclipse.riena.build3/config.rap"/>
		</copy>
	</target>

	<target name="prepareBuild">
		<available
			property="has.SDK"
			file="tools/eclipse.${ECLIPSE_STREAM}.sdk/eclipse"/>
		<antcall target="prepareSDK"/>
		<available
		    property="has.prebuild"
		    file="prebuild/plugins"/>
		<antcall target="preparePrebuild"/>
		
		<!-- if building HEAD, include a timestamp in the qualifier -->
		<tstamp />
		<condition property="qualifier" value="HEAD_${DSTAMP}${TSTAMP}">
			<equals arg1="HEAD" arg2="${BUILD_QUALIFIER}" />
		</condition>
		<property name="qualifier" value="${BUILD_QUALIFIER}" />
	</target>

	<target name="prepareSDK" unless="has.SDK">
		<unzip
			dest="tools/eclipse.${ECLIPSE_STREAM}.sdk">
			<fileset dir="tools/eclipse.${ECLIPSE_STREAM}.sdk">
				<include name="eclipse-SDK-${sdkVer}-win32.zip"/>
			</fileset>
		</unzip>
		<copy todir="tools/eclipse.${ECLIPSE_STREAM}.sdk/eclipse">
			<fileset dir="tools/gitfetchfactory"/>
		</copy>

	</target>

	<target name="preparePrebuild" unless="has.prebuild">
		<antcall target="update"/>
	</target>

	<target name="buildgit" depends="prepareBuild">
		<delete dir="tmp/build"/>
		<java 
			taskname="build"
			jar="${equinox.launcher.jar}"
			fork="true"
			failonerror="true">
			<arg value="-application"/>
			<arg value="org.eclipse.ant.core.antRunner"/>
			<arg value="-buildfile"/>
			<arg value="${pde.build.script}"/>
			<arg value="-Dbuilder=${basedir}/config.git"/>
			<arg value="-DFETCHTAG_GIT_PARM=${FETCHTAG_GIT_PARM}"/>
			<arg value="-DBUILD_QUALIFIER=${qualifier}"/>
			<arg value="-DgitCache=${gitCache}"/>
			<arg value="-DgitTargetPlatform=${gitTargetPlatform}"/>
			<arg value="-DfetchCacheLocation=${fetchCacheLocation}"/>
			<arg value="-DsdkVer=${sdkVer}"/>
			<arg value="-DequinoxSdkVer=${equinoxSdkVer}"/>
			<arg value="-DrienaBuildFeature=${rienaBuildFeature}"/>
			<arg value="-DECLIPSE_STREAM=${ECLIPSE_STREAM}"/>
		</java>
	</target>

	<target name="buildgite4" depends="prepareBuild">
		<delete dir="tmp/build"/>
		<java 
			taskname="build"
			jar="${equinox.launcher.jar}"
			fork="true"
			failonerror="true">
			<arg value="-application"/>
			<arg value="org.eclipse.ant.core.antRunner"/>
			<arg value="-buildfile"/>
			<arg value="${pde.build.script}"/>
			<arg value="-Dbuilder=${basedir}/config.git.e4"/>
			<arg value="-DFETCHTAG_GIT_PARM=${FETCHTAG_GIT_PARM}"/>
			<arg value="-DBUILD_QUALIFIER=${qualifier}"/>
			<arg value="-DgitCache=${gitCache}"/>
			<arg value="-DfetchCacheLocation=${fetchCacheLocation}"/>
			<arg value="-DsdkVer=${sdkVer}"/>
			<arg value="-DequinoxSdkVer=${equinoxSdkVer}"/>
			<arg value="-DrienaBuildFeature=${rienaBuildFeature}"/>
			<arg value="-DECLIPSE_STREAM=${ECLIPSE_STREAM}"/>
		</java>
	</target>

	<target name="buildrap" depends="prepareBuild">
		<delete dir="tmp/build"/>
		<java 
				taskname="build"
				jar="${equinox.launcher.jar}"
				fork="true"
				failonerror="true">
			<arg value="-application"/>
			<arg value="org.eclipse.ant.core.antRunner"/>
			<arg value="-buildfile"/>
			<arg value="${pde.build.script}"/>
			<arg value="-Dbuilder=${basedir}/config.rap"/>
			<arg value="-DFETCHTAG_GIT_PARM=${FETCHTAG_GIT_PARM}"/>
			<arg value="-DBUILD_QUALIFIER=${qualifier}"/>
			<arg value="-DgitCache=${gitCache}"/>
			<arg value="-DfetchCacheLocation=${fetchCacheLocation}"/>
		</java>
	</target>

	<target name="runtests">
		<delete dir="tmp/tests"/>
		<ant antfile="config.git/runtests.xml" target="run"/>
	</target>

	<target name="runtestse4">
		<delete dir="tmp/tests"/>
		<ant antfile="config.git.e4/runtestse4.xml" target="run"/>
	</target>

	<target name="beforesign">
		<!-- repack output -->
		<delete dir="${basedir}/tmp/build/N.TestBuild/repack"/>
		<mkdir dir="${basedir}/tmp/build/N.TestBuild/repack"/>
		<java 
				taskname="metadata"
				jar="${equinox.launcher.jar}"
				fork="true"
				failonerror="true">
			<arg value="-application"/>
			<arg value="org.eclipse.update.core.siteOptimizer"/>
			<arg line="-jarProcessor -processAll -repack -outputDir ${basedir}/tmp/build/N.TestBuild/repack" />
			<arg line="${basedir}/tmp/build/N.TestBuild/Riena-${ECLIPSE_STREAM}-p2repo-*.zip" />
		</java>
		<copy todir="${basedir}/tmp/build/N.TestBuild">
			<fileset dir="${basedir}/tmp/build/N.TestBuild/repack"/>
		</copy>
		<delete dir="${basedir}/tmp/build/N.TestBuild/repack"/>
	</target>

	<target name="aftersign">
		<echo>Creating pack200 files</echo>
		<mkdir dir="${basedir}/signed/pack200"/>
		<java 
				taskname="pack"
				jar="${equinox.launcher.jar}"
				fork="true"
				failonerror="true">
			<arg value="-application"/>
			<arg value="org.eclipse.update.core.siteOptimizer"/>
			<arg line="-jarProcessor -processAll -pack -outputDir ${basedir}/signed/pack200" />
			<arg line="${basedir}/signed/Riena-*-p2repo-*.zip" />
		</java>

		<echo>Unzip repo for generating metadata</echo>
		<unzip dest="${basedir}/signed/unzip">
			<fileset dir="${basedir}/signed/pack200/">
				<include name="*.zip"/>
			</fileset>
		</unzip>

		<echo>Delete metadata</echo>
		<delete>
			<fileset dir="${basedir}/signed/unzip" includes="*.jar,*.xml"/>
		</delete>

		<echo>Generate new metadata</echo>
		<java 
 				taskname="metadata"
				jar="${equinox.launcher.jar}"
				fork="true"
				failonerror="true">
			<arg value="-application"/>
			<arg value="org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher"/>
			<arg value="-metadataRepository"/>
			<arg value="file:${basedir}/signed/unzip"/>
			<arg value="-artifactRepository"/>
			<arg value="file:${basedir}/signed/unzip"/>
			<arg value="-source"/>
			<arg value="${basedir}/signed/unzip"/>
			<arg value="-publishArtifacts"/>
			<arg value="-compress"/>
		</java>

		<echo>Delete pack200 dir</echo>
		<delete dir="${basedir}/signed/pack200"/>

	</target>

	<target name="update">
		<delete dir="prebuild"/>
		<copy todir="prebuild">
			<fileset dir="${gitCache}/org.eclipse.riena.build3/prebuild"/>
		</copy>
	</target>
	
	<target name="buildReleaseRepo" depends="prepareBuild" description="Creates a p2 repository containing Riena on E4 and Riena on RAP">
		<property name="pkg.dir" value="${basedir}/tmp/pkg"/>
		<property name="tag" value="${BUILD_QUALIFIER}" />
		<property name="pkg.input.dir" value="${pkg.dir}" />
		<property name="pkg.output.dir" value="${pkg.dir}\output" />

		<mkdir dir="${pkg.output.dir}" />
		
		<property name="riena.on.e4.file" value="Riena-p2repo-${tag}-win32.zip" />
		<property name="riena.on.rap.file" value="Riena-on-RAP-p2repo-${tag}.zip" />
		
		<unzip dest="${pkg.output.dir}">
			<fileset dir="${pkg.input.dir}">
				<include name="${riena.on.e4.file}" />
				<include name="${riena.on.rap.file}" />
			</fileset>
		</unzip>
		
		<delete file="${pkg.output.dir}/metadata.xml" />
		<delete file="${pkg.output.dir}/artifacts.xml" />
		<delete>
			<fileset dir="${pkg.output.dir}">
				<include name="metadata.xml" />
				<include name="artifacts.xml" />
				<include name="features/org.eclipse.riena.build.feature.e4_*.jar" />
				<!-- remove duplicating jar -->
				<include name="plugins/org.hamcrest.core_1.3.0.v201303031735-unsigned.jar" />
			</fileset>
		</delete>

		<java taskname="metadata" jar="${equinox.launcher.jar}" fork="true" failonerror="true">
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher" />
			<arg value="-metadataRepository" />
			<arg value="file:${pkg.output.dir}" />
			<arg value="-artifactRepository" />
			<arg value="file:${pkg.output.dir}" />
			<arg value="-source" />
			<arg value="${pkg.output.dir}" />
			<arg value="-publishArtifacts" />
			<arg value="-compress" />
		</java>
		
		<zip destfile="${pkg.output.dir}/riena-e4-rap-${tag}.zip" basedir="${pkg.output.dir}" />
	</target>
</project>
