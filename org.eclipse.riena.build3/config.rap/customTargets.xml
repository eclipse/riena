<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml"/>
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/>

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<mkdir dir="${buildDirectory}/maps"/>
		<!--cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" /-->
		<copy file="${gitCache}/${mapsRoot}/build.map" toFile="${buildDirectory}/maps/build.map"/>
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
		<!-- if target/eclipse does not exist, then prepare target -->
		<available
			property="has.target"
			file="${builder}/../target/rap/eclipse"/>
		<antcall target="prepareTarget"/>
	</target>

	<target name="prepareTarget">
		<delete dir="${builder}/../target/rap/eclipse"/>

		<echo>prepare target, copy dropins, unzip rap runtime </echo>
		<copy todir="${builder}/../target/rap/eclipse/plugins">
		    <fileset dir="${builder}/../target/dropins"/>
		  </copy>
		
		<unzip
			dest="${builder}/../target/rap/eclipse"
			src="${builder}/../target/rap-3.0.0-M7-20150505-1714.zip" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<!-- workaround since fetchIUs places the 3rd party libs in wrong directory -->
		<echo>postFetch ${builder}</echo>
		<delete file="${builder}/../artifacts.jar"/>
		<delete file="${builder}/../content.jar"/>

		<copy todir="${builder}/../tmp/build/plugins">
			<fileset dir="${builder}/../plugins">
			</fileset>
		</copy>
		
		<delete dir="${builder}/../plugins"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the repositories are being processed -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the repositories have been processed -->
	<!-- ===================================================================== -->
	<target name="postProcessRepos">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
		<!-- build the Riena-on-RAP target platform zip -->
		<delete dir="${buildDirectory}/buildEclipse"/>
		<p2.repo2runnable
			destination="${buildDirectory}/buildEclipse/eclipse">
			<source>
				<repository location="file:/${buildDirectory}/${buildLabel}/org.eclipse.riena.build.feature.rap.sdk-TestBuild-group.group.group.zip" />
			</source>
		</p2.repo2runnable>
		<!-- add the full target (RAP) -->
		<copy
			todir="${buildDirectory}/buildEclipse/eclipse">
			<fileset dir="${builder}/../target/rap/eclipse"/>
		</copy>
		<tstamp/>
		<!-- create the build results -->
		<zip
			destfile="${buildDirectory}/N.TestBuild/Riena-on-RAP-target-${BUILD_QUALIFIER}.zip"
			basedir="${buildDirectory}/buildEclipse/"/>
		<move
			tofile="${buildDirectory}/N.TestBuild/Riena-on-RAP-p2repo-${BUILD_QUALIFIER}.zip"
			file="${buildDirectory}/N.TestBuild/org.eclipse.riena.build.feature.rap.sdk-TestBuild-group.group.group.zip"/>
		
		<!-- copy build artefacts to lastest output dir -->
		<property name="latestOutputDir" value="${buildDirectory}/../latestOutput" />
		<delete failonerror="false" verbose="true">
		    <fileset dir="${latestOutputDir}" includes="Riena-on-RAP-target*.zip"/>
		    <fileset dir="${latestOutputDir}" includes="Riena-on-RAP-p2repo*.zip"/>
		</delete>
		<copy todir="${latestOutputDir}">
			<fileset dir="${buildDirectory}/N.TestBuild" includes="*" />
		</copy>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<delete
			file="${buildDirectory}/N.TestBuild/org.eclipse.riena.build.feature.rap.sdk-TestBuild-group.group.group.zip"
		    failonerror="false" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
